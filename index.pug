extends layout

block content0
  style.
    .ui { font-family: Avenir, sans-serif; }
    .code { font-family: Monofur, monospace; }
    .light { background: whitesmoke; color: black; }
    .tight { margin: 0; padding: 0; }

    #about {
      padding: 0.5ex 0 0 1ex;
      color: #333333;
      font-size: 130%;
    }

    #program {
      float: left;
      color: #333333;
      font-size: 1.2em;
    }

    #execute, #creditSpent {
      width: 6em;
      font-size: 120%;
    }

  script.
    (() => { 'use strict';
      const elem = id => document.getElementById(id);
      const on = (t, e, h) => t.addEventListener(e, h);
      const ready = h => on(document, 'DOMContentLoaded', h);

      ready(() => {
        on(elem('execute'), 'click', async () => {
          let [langAndVerIndex, stdin, script] = elem('program').
            value.split(/\s--\s/m);
          let [language, versionIndex] = langAndVerIndex.split(/\s/);
          let msg = `execute ${language} program`;

          p(`${msg}...`, null);

          let t0 = performance.now();
          let result = await jdoodle.execute({
            language,
            versionIndex: Number(versionIndex) || 0,
            stdin,
            script
          });
          let t1 = performance.now();
          let seconds = (t1 - t0) / 1000;

          if (!result.error) {
            let stats = `mem: ${result.memory}K, cpu: ${result.cpuTime}`;
            let reFailure = /Command exited with non-zero status -?\d+\s?$/m;
            let failed = result.output.match(reFailure);
            let level = (failed) ? 'warn' : 'log';

            p(result.output, `(in ${seconds.toFixed(3)}s (${stats})) ${msg}`, {level});
          } else {
            pp(result, `Error: ${result.error}`, {level: 'error'});
          }
        });

        on(elem('creditSpent'), 'click', async () => {
          let msg = `credit(s) spent`;

          p(`${msg}...`, null);

          let result = await jdoodle.creditSpent();

          if (!result.error) {
            p(`${result.used} ${msg}`, null);
          } else {
            pp(result, `Error: ${result.error}`, {level: 'error'});
          }
        });
      });
    })();

block content
  h1(class='tight', id='about')= title

  p(class='tight')
    textarea(class='code', id='program',
      rows='25', cols='80', autocorrect='off'
    ).
      ruby 2
      --
      Hey!
      --
      puts "ruby \#{RUBY_VERSION}: \#{ARGF.read}"

    button(id='execute') Execute
    br
    button(id='creditSpent') Credit
